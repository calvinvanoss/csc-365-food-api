// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  password String
  token    String
  recipes  Recipe[]
  ratings  Rating[]

  @@map("users")
}

model Recipe {
  id                Int                @id @default(autoincrement())
  name              String
  instructions      String
  userId            Int                @map("user_id")
  user              User               @relation(fields: [userId], references: [id])
  recipeIngredients RecipeIngredient[]
  recipeAttributes  RecipeAttribute[]
  ratings           Rating[]

  @@map("recipes")
}

model Ingredient {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  recipeIngredients RecipeIngredient[]

  @@map("ingredients")
}

model Attribute {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  receipes RecipeAttribute[]

  @@map("attributes")
}

model RecipeIngredient {
  recipeId     Int        @map("recipe_id")
  ingredientId Int        @map("ingredient_id")
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model RecipeAttribute {
  recipeId    Int       @map("recipe_id")
  attributeId Int       @map("attribute_id")
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@id([recipeId, attributeId])
  @@map("recipe_attributes")
}

model Rating {
  rating      Int
  recipeId    Int     @map("recipe_id")
  userId      Int     @map("user_id")
  description String?
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId])
  @@map("ratings")
}
